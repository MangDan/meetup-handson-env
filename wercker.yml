#Use OpenJDK base docker image from dockerhub and open the application port on the docker container
box:
  id: openjdk:8-jdk
#  id: jimador/docker-jdk-8-maven-node
ports:
  - 8080

#Build our application using Maven, just as we always have
build:
  steps:
    - script:
        name: pwd
        code: pwd
    - install-packages:
        packages: maven
    - script:
        name: maven meetup-handson-env-backend build
        cwd: meetup-handson-env-backend
        code: mvn clean package

#Push the docker image with our built and tested application to the Oracle Container Registry
meetup-handson-env-backend-push:
  steps:
    - internal/docker-push:
        username: $DOCKER_USERNAME
        password: $OCI_AUTH_TOKEN
        repository: $DOCKER_REGISTRY/$DOCKER_REPO
        registry: https://$DOCKER_REGISTRY/v2
        tag: $WERCKER_GIT_BRANCH-$WERCKER_GIT_COMMIT-meetup-handson-env-backend
        working-dir: /pipeline/source/meetup-handson-env-backend
        ports: 8080
        cmd: java -jar target/meetup-handson-env-backend-1.0.jar

meetup-handson-env-frontend-push:
  steps:
    - script:
        name: pwd
        code: pwd
    - internal/docker-build:
        context: meetup-handson-env-frontend
        dockerfile: Dockerfile
        image-name: meetup-handson-env-frontend
    - internal/docker-push:
        image-name: meetup-handson-env-frontend
        username: $DOCKER_USERNAME
        password: $OCI_AUTH_TOKEN
        repository: $DOCKER_REGISTRY/$DOCKER_REPO
        registry: https://$DOCKER_REGISTRY/v2
        tag: $WERCKER_GIT_BRANCH-$WERCKER_GIT_COMMIT-meetup-handson-env-frontend

#Deploy our container from the Oracle Container Registry to the Oracle Container Engine (Kubernetes)
deploy-to-cluster:
  deploy-to-cluster:
  box:
      id: alpine
      cmd: /bin/sh

  steps:
  - bash-template

  - kubectl:
      name: create namespace
      server: $KUBERNETES_MASTER
      token: $KUBERNETES_AUTH_TOKEN
      insecure-skip-tls-verify: true
      command: create namespace $NAMESPACE; echo delete registry secret
  - kubectl:
      name: delete secret
      server: $KUBERNETES_MASTER
      token: $KUBERNETES_AUTH_TOKEN
      insecure-skip-tls-verify: true
      command: delete secret wercker -n $NAMESPACE; echo delete registry secret
  - kubectl:
      name: create secret
      server: $KUBERNETES_MASTER
      token: $KUBERNETES_AUTH_TOKEN
      insecure-skip-tls-verify: true
      command: create secret docker-registry wercker --docker-server=$DOCKER_REGISTRY --docker-email=nobody@oracle.com --docker-username=$DOCKER_USERNAME --docker-password='$OCI_AUTH_TOKEN' -n $NAMESPACE; echo create registry secret
  - script: 
      name: "Visualise Kubernetes config"
      code: cat kube-meetup-handson-env-backend-config.yml

  - kubectl:
      name: deploy meetup-handson-env-backend service to kubernetes
      server: $KUBERNETES_MASTER
      token: $KUBERNETES_AUTH_TOKEN
      insecure-skip-tls-verify: true
      command: apply -f kube-meetup-handson-env-backend-config.yml -n $NAMESPACE

  - script:
      name: "Visualise Kubernetes config"
      code: cat kube-meetup-handson-env-frontend-config.yml

  - kubectl:
      name: deploy kube-meetup-handson-env-frontend ui to kubernetes
      server: $KUBERNETES_MASTER
      token: $KUBERNETES_AUTH_TOKEN
      insecure-skip-tls-verify: true
      command: apply -f kube-meetup-handson-env-frontend-config.yml -n $NAMESPACE
